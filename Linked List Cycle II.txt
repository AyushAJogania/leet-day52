/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        // Initialize slow and fast pointers
        ListNode *slow = head;
        ListNode *fast = head;

        // Check if there's a cycle in the linked list
        while (fast != NULL && fast->next != NULL) {
            slow = slow->next;         // Move slow pointer one step
            fast = fast->next->next;   // Move fast pointer two steps

            // If slow and fast meet, there's a cycle
            if (slow == fast) {
                // Move one of the pointers to the head
                slow = head;

                // Move both pointers one step at a time until they meet again
                while (slow != fast) {
                    slow = slow->next;
                    fast = fast->next;
                }

                // Return the starting node of the cycle
                return slow;
            }
        }

        // If no cycle is found, return NULL
        return NULL;
    }
};
